esphome:
  name: linp_doorbell
  platform: ESP32
  board: esp32doit-devkit-v1
  includes:
    - linp-doorbell.h
  libraries:
    - "ArduinoQueue"
  platformio_options:
    platform: espressif32@1.11.0
    platform_packages: |-4
      
          framework-arduinoespressif32 @ https://github.com/pauln/arduino-esp32.git#solo-no-mac-crc/1.0.4

wifi:
  ssid: 'your-wifi-ssid-here'
  password: 'put-your-wifi-password-here'

globals:
  - id: doorbell_new_volume
    type: int
    restore_value: no
    initial_value: '0'
  - id: doorbell_tune_to_play
    type: int
    restore_value: no
    initial_value: '0'
  - id: doorbell_tune_to_learn
    type: int
    restore_value: no
    initial_value: '0'
  - id: doorbell_tune_for_button
    type: int
    restore_value: no
    initial_value: '0'
  - id: doorbell_button
    type: int
    restore_value: no
    initial_value: '0'
  - id: doorbell_button_to_forget
    type: int
    restore_value: no
    initial_value: '0'
  - id: doorbell_raw_command
    type: String
    restore_value: no
    initial_value: 'String("down none")'

# Enable Home Assistant API
api:
  password: 'set-an-api-password-here'
  services:
    - service: set_volume
      variables:
        volume: int
      then:
        - globals.set:
            id: doorbell_new_volume
            value: !lambda 'return volume;'
        - script.execute: doorbell_set_volume
    - service: play_tune
      variables:
        tune: int
      then:
        - globals.set:
            id: doorbell_tune_to_play
            value: !lambda 'return tune;'
        - script.execute: doorbell_play_tune
    - service: learn_button
      variables:
        tune: int
      then:
        - globals.set:
            id: doorbell_tune_to_learn
            value: !lambda 'return tune;'
        - script.execute: doorbell_learn_button
    - service: set_tune
      variables:
        button: int
        tune: int
      then:
        - globals.set:
            id: doorbell_tune_for_button
            value: !lambda 'return tune;'
        - globals.set:
            id: doorbell_button
            value: !lambda 'return button;'
        - script.execute: doorbell_set_tune
    - service: forget_button
      variables:
        button: int
      then:
        - globals.set:
            id: doorbell_button_to_forget
            value: !lambda 'return button;'
        - script.execute: doorbell_forget_button
    - service: send_raw_command
      variables:
        command: string
      then:
        - globals.set:
            id: doorbell_raw_command
            value: !lambda 'return String(command.c_str());'
        - script.execute: doorbell_send_raw_command

custom_component:
- id: doorbell
  lambda: |-
    auto doorbell = new LinpDoorbell();
    App.register_component(doorbell);
    return {doorbell}; 

script:
  - id: doorbell_set_volume
    then:
      lambda: 'get_linp_doorbell(doorbell)->setVolume(id(doorbell_new_volume));'

  - id: doorbell_play_tune
    then:
      lambda: 'get_linp_doorbell(doorbell)->playTune(id(doorbell_tune_to_play));'

  - id: doorbell_learn_button
    then:
      lambda: 'get_linp_doorbell(doorbell)->learnButton(id(doorbell_tune_to_learn));'

  - id: doorbell_set_tune
    then:
      lambda: 'get_linp_doorbell(doorbell)->setTune(id(doorbell_button), id(doorbell_tune_for_button));'

  - id: doorbell_forget_button
    then:
      lambda: 'get_linp_doorbell(doorbell)->forgetButton(id(doorbell_button_to_forget));'

  - id: doorbell_send_raw_command
    then:
      lambda: 'get_linp_doorbell(doorbell)->sendRawCommand(id(doorbell_raw_command));'

sensor:
  - platform: custom
    lambda: |-
      return {
        get_linp_doorbell(doorbell)->volume_sensor,
        get_linp_doorbell(doorbell)->playing_sensor,
        get_linp_doorbell(doorbell)->chime1_sensor,
        get_linp_doorbell(doorbell)->chime2_sensor,
        get_linp_doorbell(doorbell)->chime3_sensor,
        get_linp_doorbell(doorbell)->chime4_sensor,
        get_linp_doorbell(doorbell)->chime5_sensor,
        get_linp_doorbell(doorbell)->chime6_sensor,
        get_linp_doorbell(doorbell)->chime7_sensor,
        get_linp_doorbell(doorbell)->chime8_sensor,
        get_linp_doorbell(doorbell)->chime9_sensor,
        get_linp_doorbell(doorbell)->chime10_sensor
      };
    sensors:
      - name: "Volume"
      - name: "Tune Playing" # Optional
      - name: "Button 1 Tune"
      - name: "Button 2 Tune"
      - name: "Button 3 Tune"
      - name: "Button 4 Tune"
      - name: "Button 5 Tune"
      - name: "Button 6 Tune"
      - name: "Button 7 Tune"
      - name: "Button 8 Tune"
      - name: "Button 9 Tune"
      - name: "Button 10 Tune"

# Binary sensors are optional, mostly useful if you want to use them for local
# automation on the ESPHome node.  Home Assistant events are automatically
# triggered whether or not these binary sensors are set up.
binary_sensor:
  - platform: custom
    lambda: |-
      return {
        get_linp_doorbell(doorbell)->button1_sensor,
        get_linp_doorbell(doorbell)->button2_sensor,
        get_linp_doorbell(doorbell)->button3_sensor,
        get_linp_doorbell(doorbell)->button4_sensor,
        get_linp_doorbell(doorbell)->button5_sensor,
        get_linp_doorbell(doorbell)->button6_sensor,
        get_linp_doorbell(doorbell)->button7_sensor,
        get_linp_doorbell(doorbell)->button8_sensor,
        get_linp_doorbell(doorbell)->button9_sensor,
        get_linp_doorbell(doorbell)->button10_sensor
      };
    binary_sensors:
      - name: "Button 1"
      - name: "Button 2"
      - name: "Button 3"
      - name: "Button 4"
      - name: "Button 5"
      - name: "Button 6"
      - name: "Button 7"
      - name: "Button 8"
      - name: "Button 9"
      - name: "Button 10"